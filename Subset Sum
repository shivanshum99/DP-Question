Recursive Code:
bool isSubsetPresent(int n, int k, vector<int> &a)
{
    if(k==0) return true;
    if(n==0) return k == a[0];

    bool notPick = isSubsetPresent(n-1, k, a);

    bool pick = false;
    if(k>=a[n]){
        pick = isSubsetPresent(n-1, k-a[n], a);
    }

    return notPick || pick; 
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Memoisation Code:
bool solveMem(int n, int k, vector<int> &a, vector<vector<int>> &dp){
    if(k==0) return true;
    if(n==0) return k == a[0];
    if(dp[n][k] != -1) return dp[n][k];
    bool notPick = solveMem(n-1, k, a, dp);

    bool pick = false;
    if(k>=a[n]){
        pick = solveMem(n-1, k-a[n], a, dp);
    }

    return dp[n][k] = notPick | pick; 
}
bool isSubsetPresent(int n, int k, vector<int> &a)
{
    vector<vector<int>> dp(n+1, vector<int>(k+1, -1));
    return solveMem(n,k,a,dp);
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//Tabulation Method Code:
bool isSubsetPresent(int n, int k, vector<int> &a)
{
    vector<vector<bool>> dp(n+1, vector<bool>(k+1, 0));
    for(int i=0;i<n;i++) dp[i][0] = true;
    dp[0][a[0]] == true;
    for(int ind = 1;ind<=n;ind++){
        for(int target = 1;target<=k;target++){
             bool notPick = dp[ind-1][target];

            bool pick = false;
            if(target>=a[ind]){
                pick = dp[ind-1][target-a[ind]];
            }
            dp[ind][target] = notPick | pick;
        }
    }
    return dp[n][k];
}
