#include <bits/stdc++.h> 

//Recursive Solution
int solveRec(int i, int j, vector<vector<int>> &arr)
{

    //base case
    if(j<0 || j>=arr[0].size())
        return -1e9;
    if(i == 0)
        return arr[0][j];
    
    

    int up = arr[i][j] + solveRec(i-1,j,arr);
    int lup = arr[i][j] + solveRec(i-1, j-1,arr);
    int rup = arr[i][j] + solveRec(i-1,j+1,arr);

    return max(up,max(lup, rup));
}

//Memoisation Solution
int solveMem(int i, int j, vector<vector<int>> &arr, vector<vector<int>>& dp)
{

    //base case
    if(j<0 || j>=arr[0].size())
        return -1e9;
    if(i == 0)
        return arr[0][j];
    
    if(dp[i][j] != -1)
        return dp[i][j];
    

    int up = arr[i][j] + solveMem(i-1,j,arr,dp);
    int lup = arr[i][j] + solveMem(i-1, j-1,arr,dp);
    int rup = arr[i][j] + solveMem(i-1,j+1,arr,dp);

    return dp[i][j] = max(up,max(lup, rup));
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int row = matrix.size();
    int col = matrix[0].size();

    int maxi = -1e9;

    //for Recursive
    // for(int j = 0; j<col; j++)
    // {
    //     maxi = max(maxi, solveMem(row-1, j, matrix));
    // }

    //for Memoisation
    vector<vector<int>>dp(row, vector<int>(col, -1));
    for(int j = 0; j<col; j++)
    {
        maxi = max(maxi, solveMem(row-1, j, matrix, dp));
    }
    return maxi;
}


-----------------------------------------------------------------------------------------------------------------------------------------------------
// Tabulation Method
#include <bits/stdc++.h> 

int getMaxPathSum(vector<vector<int>> &arr)
{
    int n = arr.size();
    int m = arr[0].size();
    vector<vector<int>>dp(n, vector<int>(m, 0));
    for(int j=0;j<m;j++)
    {
        dp[0][j] = arr[0][j];
    }

    for(int i = 1;i<n;i++)
    {
        for(int j = 0;j<m;j++)
        {
            int d = arr[i][j] + dp[i-1][j];
            int ld = arr[i][j];
            if(j-1>=0) ld+=dp[i-1][j-1];
            else ld+=-1e9;
            int rd = arr[i][j];
            if(j+1<m) rd+=dp[i-1][j+1];
            else rd+=-1e9;
            dp[i][j] = max(d,max(ld, rd));
        }
    }
    int maxi = -1e9;
    for(int j = 0; j<m; j++)
    {
        maxi = max(maxi, dp[n-1][j]);
    }
    return maxi;
}
