class Solution {
public:

    //Recursive Solution
    int solve(vector<int>& coins, int amount)
    {
        //base case
        if(amount == 0)
        {
            return 0;
        }  
        if(amount<0)
        {
            return INT_MAX;
        }
        //let solve 1 case

        int mini = INT_MAX;
        for(int i=0;i<coins.size();i++)
        {
            int ans = solve(coins, amount-coins[i]);
            if(ans!=INT_MAX)
                mini = min(mini,1+ans);
        } 
        return mini;
    }
    
    //Memoization Solution
    int solveMem(vector<int>& coins, int amount, vector<int>& dp)
    {
        //base case
        if(amount == 0)
        {
            return 0;
        }  
        if(amount<0)
        {
            return INT_MAX;
        }
        if(dp[amount]!=-1)
        {
            return dp[amount];
        }
        //let solve 1 case

        int mini = INT_MAX;
        for(int i=0;i<coins.size();i++)
        {
            int ans = solveMem(coins, amount-coins[i],dp);
            if(ans!=INT_MAX)
                mini = min(mini,1+ans);
        } 
        return dp[amount] = mini;
    }


    //Tabulation Solution
    int solveTab(vector<int>& coins, int amount)
    {
        vector<int>dp(amount+1,INT_MAX);
        dp[0] = 0;
        for(int i=1;i<=amount;i++)
        {
            int mini = INT_MAX;
            for(int j=0;j<coins.size();j++)
            {
                if(i-coins[j]>=0 && dp[i-coins[j]]!=INT_MAX)
                {
                    int ans = dp[i-coins[j]];
                    if(ans!=INT_MAX)
                        mini = min(mini,1+ans);
                }
                
            }
            dp[i] = mini;
        }
        return dp[amount];
        
    }
    int coinChange(vector<int>& coins, int amount) {
        vector<int>dp(amount+1,-1);
        int ans = solveTab(coins, amount);
        if(ans == INT_MAX)
        {
            return -1;
        }
        return ans;
    }
};
