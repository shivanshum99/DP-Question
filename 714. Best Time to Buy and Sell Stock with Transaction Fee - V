class Solution {
public:
    int solveRec(vector<int>& prices, int ind, int buy, int& fee){
        if(ind>=prices.size()){
            return 0;
        }
        int profit = 0;
        if(buy){
            int buyItProfit = -prices[ind] + solveRec(prices, ind+1, 0, fee);
            int skipProfit = 0 + solveRec(prices, ind+1, 1, fee);
            profit = max(buyItProfit, skipProfit);
        }
        else //buy = 0
        {
            int sellItProfit = prices[ind] + solveRec(prices, ind+1, 1, fee) - fee;//this is the point where 1 TXN completed
            int skipProfit = 0 + solveRec(prices, ind+1, 0, fee);
            profit = max(sellItProfit,skipProfit);
        }
        return profit;
    }
    int solveMem(vector<int>& prices, int ind, int buy, vector<vector<int>>& dp, int& fee){
        if(ind>=prices.size()){
            return 0;
        }

        if(dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;
        if(buy){
            int buyItProfit = -prices[ind] + solveMem(prices, ind+1, 0, dp, fee);
            int skipProfit = 0 + solveMem(prices, ind+1, 1, dp, fee);
            profit = max(buyItProfit, skipProfit);
        }
        else //buy = 0
        {
            int sellItProfit = prices[ind] + solveMem(prices, ind+1, 1, dp, fee) - fee;
            int skipProfit = 0 + solveMem(prices, ind+1, 0, dp, fee);
            profit = max(sellItProfit,skipProfit);
        }
        return dp[ind][buy] = profit;
    }
    int maxProfit(vector<int>& prices, int fee) {
        //return solveRec(prices, 0, 1, fee);
        vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        return solveMem(prices, 0, 1, dp, fee);
    }
};
