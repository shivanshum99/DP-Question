class Solution {
public:
    //recursion solution
    int solve(vector<int>& nums,int n)
    {
       
        if(n==0)
        {
            return nums[0];
        }
        if(n<0)
        {
            return 0;
        }
        int pick = nums[n]+solve(nums,n-2);
        int notpick = 0+solve(nums,n-1);

        return max(pick,notpick);
    }

    //dp: topbottom
    int solve2(vector<int>& nums,int n,vector<int>&dp)
    {
        //base case
        if(n==0)
        {
            return nums[n];
        }
        if(n<0)
        {
            return 0;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        int pick = nums[n]+solve2(nums,n-2,dp);
        int notpick = 0+solve2(nums,n-1,dp);

        return dp[n]=max(pick,notpick);
    }

    //dp: bottom up
    int solve3(vector<int>& nums,int n)
    {
        vector<int>dp(n+1,-1);
        //base case
        dp[0] = nums[0];
        for(int i=1;i<=n;i++)
        {
            int pick = nums[i]; if(i>1) pick+=dp[i-2];
            int notpick = 0+dp[i-1];
            dp[i] = max(pick,notpick);
        }
        return dp[n];
    }

    //dp: space optimisation
    int solve4(vector<int>& nums,int n)
    {
        //base case
        int prev= nums[0];
        int prev2 = 0;
        for(int i=1;i<=n;i++)
        {
            int pick = nums[i]; if(i>1) pick+=prev2;
            int notpick = 0+prev;
            int curr = max(pick,notpick);
            prev2=prev;
            prev = curr;
        }
        return prev;
    }

    int rob(vector<int>& nums) {
        int n = nums.size();
        // vector<int>dp(n+1,-1);
        // return solve(nums,nums.size()-1); 
        // return solve2(nums,n-1,dp); 
        // return solve3(nums,n-1);
        return solve4(nums,n-1);

    }
};
