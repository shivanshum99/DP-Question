Write a program to construct and print the hierarchical structure of employees in an organization based on their reporting relationships.

Input:
A table with the following columns:

empid: Employee ID
name: Employee Name
managerid: Manager ID (null if no manager)

Example Input:
empid    name       managerid
1        vasu       null
2        sohil      3
3        manoj      1
4        pankaj     3
5        sagar      2
6        anant      1
7        abhijit    6
8        iffa       6
9        saurabh    2

1, {3, 6}

Output:
Print the organizational hierarchy in a tree format.

Expected Output:

vasu
    |____ manoj
            |____ sohil
                    |____ sagar
                    |____ saurabh
            |____ pankaj
    |____ anant
            |____ iffa
            |____ Abhijit


#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

class Employee {
public:
    int empid;
    std::string name;
    int managerid;
    std::vector<Employee*> subordinates;

    Employee(int id, const std::string& n, int mid) : empid(id), name(n), managerid(mid) {}
};

void buildHierarchy(std::vector<Employee*>& employees, std::unordered_map<int, Employee*>& empMap) {
    Employee* root = nullptr;

    for (auto& emp : employees) {
        if (emp->managerid == -1) {
            root = emp;
        } else {
            Employee* manager = empMap[emp->managerid];
            manager->subordinates.push_back(emp);
        }
    }

    if (root) {
        printHierarchy(root, 0);
    } else {
        std::cout << "No root found. Check the input data for errors." << std::endl;
    }
}

void printHierarchy(Employee* emp, int level) {
    for (int i = 0; i < level; ++i) {
        std::cout << "    ";
    }
    std::cout << "|____" << emp->name << std::endl;
    std::sort(emp->subordinates.begin(), emp->subordinates.end(), [](Employee* a, Employee* b) {
        return a->name < b->name;
    });
    for (auto& sub : emp->subordinates) {
        printHierarchy(sub, level + 1);
    }
}

int main() {
    // Input data
    std::vector<std::tuple<int, std::string, int>> employeeData = {
        {1, "vasu", -1},
        {2, "sohil", 3},
        {3, "manoj", 1},
        {4, "pankaj", 3},
        {5, "sagar", 2},
        {6, "anant", 1},
        {7, "abhijit", 6},
        {8, "iffa", 6},
        {9, "saurabh", 2}
    };

    std::vector<Employee*> employees;
    std::unordered_map<int, Employee*> empMap;

    // Create Employee objects and store them in a vector and a map
    for (const auto& data : employeeData) {
        int empid, managerid;
        std::string name;
        std::tie(empid, name, managerid) = data;
        Employee* emp = new Employee(empid, name, managerid);
        employees.push_back(emp);
        empMap[empid] = emp;
    }

    // Build and print the employee hierarchy
    buildHierarchy(employees, empMap);

    // Clean up dynamically allocated memory
    for (auto emp : employees) {
        delete emp;
    }

    return 0;
}



