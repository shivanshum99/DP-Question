class Solution {
public:

    //Recursive Solution
    int solve(int n)
    {
        if(n==1 || n==0)
        {
            return n;
        }
        int ans = solve(n-1) + solve(n-1);
        return ans;
    }

    //Memoization Solution 
    int topdownsolve(int n, vector<int> &dp)
    {
        if(n==1 || n==0)
        {
            return n;
        }
        if(dp[n]!=-1)
        {
            return dp[n];
        }
        dp[n] = topdownsolve(n-1,dp) + topdowmsolve(n-2,dp);
        return dp[n];
    }

    //Tabulation Solution
    int BottomUpSolve(int n)
    {
        //create dp array
        vector<int> dp(n+1,-1);

        //step-2: observe base case in above solution
        dp[0]=0;
        if(n==0)
        {
            return dp[0];
        }
        dp[1]=1;
        if(n==1)
        {
            return dp[1];
        }

        for(int i=2;i<=n;i++)
        {
            dp[i] = dp[i-1]+dp[i-2];
        }
        return dp[n];
    }

    //Space Optimisation
    int solveSO(int n)
    {
        int prev1 = 0;
        int prev2 = 0;
        int curr = 1;
        if(n==0)
        {
            return 0;
        }
        if(n==1)
        {
            return 1;
        }

        for(int i=2;i<=n;i++)
        {
            prev2 = prev1;
            prev1 = curr;
            curr = prev1+prev2;
        }
        return curr;
    }
    int fib(int n) {
        // int ans = solve(n);
        // return ans;
        
        //step -1 create dp array
        // vector<int> dp(n+1,-1);
        // int ans = topdownsolve(n, dp);
        // return ans;

        // return BottomUpSolve(n);

        return solveSO(n);
    }
};
