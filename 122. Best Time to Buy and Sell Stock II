class Solution {
public:
    int solveRec(vector<int>& prices, int ind, bool buy){
        if(ind>=prices.size()){
            return 0;
        }
        int profit = 0;
        if(buy){
            int buyItProfit = -prices[ind] + solveRec(prices, ind+1, 0);
            int skipProfit = 0 + solveRec(prices, ind+1, 1);
            profit = max(buyItProfit, skipProfit);
        }
        else //buy = 0
        {
            int sellItProfit = prices[ind] + solveRec(prices, ind+1, 1);
            int skipProfit = 0 + solveRec(prices, ind+1, 0);
            profit = max(sellItProfit,skipProfit);
        }
        return profit;
    }

    int solveMem(vector<int>& prices, int ind, int buy, vector<vector<int>>& dp){
        if(ind>=prices.size()){
            return 0;
        }

        if(dp[ind][buy] != -1) return dp[ind][buy];

        int profit = 0;
        if(buy){
            int buyItProfit = -prices[ind] + solveMem(prices, ind+1, 0, dp);
            int skipProfit = 0 + solveMem(prices, ind+1, 1, dp);
            profit = max(buyItProfit, skipProfit);
        }
        else //buy = 0
        {
            int sellItProfit = prices[ind] + solveMem(prices, ind+1, 1, dp);
            int skipProfit = 0 + solveMem(prices, ind+1, 0, dp);
            profit = max(sellItProfit,skipProfit);
        }
        return dp[ind][buy] = profit;
    }

    int solveTab(vector<int>& prices){

        vector<vector<int>> dp(prices.size()+1, vector<int>(2, 0));

        for(int ind = prices.size()-1;ind>=0;ind--){
            for(int buy = 0;buy<2;buy++){
                int profit = 0;
                if(buy){
                    int buyItProfit = -prices[ind] + dp[ind+1][0];
                    int skipProfit = 0 + dp[ind+1][1];
                    profit = max(buyItProfit, skipProfit);
                }
                else //buy = 0
                {
                    int sellItProfit = prices[ind] + dp[ind+1][1];
                    int skipProfit = 0 + dp[ind+1][0];
                    profit = max(sellItProfit,skipProfit);
                }
                dp[ind][buy] = profit;
            }
        }
        return dp[0][1];
    }
    int maxProfit(vector<int>& prices) {
        //vector<vector<int>> dp(prices.size(), vector<int>(2, -1));
        //return solveMem(prices, 0, true, dp);

        return solveTab(prices);
    }
};
